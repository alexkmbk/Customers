@model IEnumerable<Customers.Models.BankAccount>

<h4>@Html.ViewData["Title"]</h4>

@*Общие данные формы редактирования таблицы*@
<input id="CustomerId" type="hidden" value="@Html.ViewBag.CustomerId">

<input type="button" value="Добавить" onclick="NewBankAccountClick()" autofocus class="btn btn-default" />
<input type="button" value="Изменить" onclick="EditBankAccountClick()" class="btn btn-default" />
<input type="button" value="Удалить" onclick="DeleteBankAccountClick()" class="btn btn-default" />

@*Элемент для передачи фокуса таблице*@
<a id="bankaccounts_table_input" href="#bankaccounts_table"></a>

@*Таблица банковских счетов*@
@if (Model.Count() == 0)
{
    @*Выводим пустую таблицу, если нет данных*@
    <table id="bankaccounts_table" class="table table-striped table-bordered table-condensed EmptyTable">
        <thead>
            <tr>
                <th>Номер счета</th>
                <th>Банк</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td></td><td></td>
            </tr>
        </tbody>
    </table>
}
else {
        <table id="bankaccounts_table"class="table table-striped table-bordered table-condensed">
            <thead>
                <tr>
                    <th>Номер счета</th>
                    <th>Банк</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in Model)
                {
                    <tr>
                        <td>@e.BankAccountNumber</td>
                        <td>@e.Bank.BankName</td>
                        <td style="display:none;">@e.Bank.BankId</td>
                        <td style="display:none;">@e.BankAccountId</td>
                    </tr>
                }
            </tbody>
        </table>

   }

@*поля ввода для редактирования строки*@
<div id="bankaccounts_table_inputrow">
    <input id="BankAccountNumber_input" type="hidden" index=0 show="true" class="tableinput"/>
    <input id="BankName_input" type="hidden" index=1 show="true" class="tableinput"/>
    <input id="BankId_input" type="hidden" index=2 show="false" class="tableinput"/>
    <input id="BankAccountId_input" type="hidden" index=3 show="false" class="tableinput"/>
</div>

<script>
    var autoComplete, input, dlg = $("#dialog_customer");
    var saving = false;

    @*Press Добавить button*@
    function NewBankAccountClick() {

        // Удалим пустую строку в пустой таблице
        $('.EmptyTable tr:last').first().remove();
        $('.EmptyTable').removeClass("EmptyTable");

        $('#bankaccounts_table tr:last').after("<tr> \
       <td></td> \
       <td></td> \
       <td style='display:none;'></td> \
       <td style='display:none;'></td> \
       </tr>)");
        EditRow($('#bankaccounts_table tr:last'));
    }

    @*Press Изменить button*@
    function EditBankAccountClick() {

        EditRow($('#bankaccounts_table .highlight'));
    }

    @*Press Удалить button*@
    function DeleteBankAccountClick() {

        DeleteRow($('#bankaccounts_table .highlight'));
    }

    @*Save Bank Accountchanges*@
    function SaveBankAccountChanges() {

        @*Здесь по атрибуту isNew, определяется что это новая запись или уже существующая
                в зависимости от этого будет вызываться различный метод контроллера: Add или Update*@
        var action;
        if (document.getElementById('dialog_BankAccount').getAttribute("isNew") == "true") action = '@Url.Action("AddBankAccount", "Customers")';
        else action = '@Url.Action("UpdateBankAccount", "Customers")';

        var msg = $('#form_BankAccount').serialize();
        $.ajax({
            type: 'POST',
            url: action,
            data: msg,
            success: function (data) {
                @*Если запрос выполнен без ошибок то присваиваем полученный с сервера html код, элементу BankAccountsTable*@
                if (data["isOk"]) {
                    $('#dialog_BankAccount').dialog('close');
                    $('#bankaccounts_table_div').html(data["view"]);
                }
                else {
                    @*Если запрос обработан, но произошла ошибка, то устанавливаем текст ошибки в элементе dialog_BankAccount_divmsg
                        расположенном здесь, же на форме диалога, чтобы пользователь мог видеть сообщение*@
                    var myDiv = document.getElementById("dialog_BankAccount_divmsg");
                    myDiv.innerHTML = "Ошибка записи: " + data["Errors"];
                }
            },
            // если запрос не удалось обработать
            error: function (xhr, str) {
                var myDiv = document.getElementById("dialog_BankAccount_divmsg");
                myDiv.innerHTML = "Ошибка записи: " + xhr.responseCode;
            }
        });

    }
    // Autocomplete
    $(function () {

        input = $("#BankName_input");
        input.autocomplete({
            source: '@Url.Action("GetAutocompleteBankList", "Customers")',
            minLength: 1,
            select: function (event, ui) {
                ui.item ?
                $("#BankId_input").val(ui.item.Id) :
                   $("#BankId_input").val("");
            },
            open: function () {
                autoComplete.zIndex(dlg.zIndex() + 10);
            }
        });
        autoComplete = input.autocomplete("widget");
        autoComplete.insertAfter(dlg.parent());
    });


    @*Обработка событий связанных с редактирвоанием ТЧ*@


    function SaveData(rowdata) {

        var action;
        var rowdata;

        if (saving) return;

        saving = true;

        if (rowdata[3] == "") {
            action = '@Url.Action("AddBankAccount", "Customers")';
            rowdata = { BankAccountNumber: rowdata[0], BankId: rowdata[2], CustomerId: $("#CustomerId").val() }
        }
        else {
            action = '@Url.Action("UpdateBankAccount", "Customers")';
            rowdata = { BankAccountNumber: rowdata[0], BankId: rowdata[2], CustomerId: $("#CustomerId").val(), BankAccountId: rowdata[3] }
        }
        $.ajax({
            type: 'POST',
            url: action,
            data: rowdata,
            success: function (data) {
                if (data["isOk"]) {
                    // перенесем элементы редактирования обратно
                    var inputrow = $("#bankaccounts_table_inputrow");
                    $(".tableinput").parent().parent().find("input").each(function (index, value) {
                        var td = $(this).parent();
                        $(this).attr("type", "hidden");
                        inputrow.append($(this));
                        td.html($(this).val());
                    });
                    saving = false;
                }
                else {
                    var myDiv = document.getElementById("dialog_customer_divmsg");
                    myDiv.innerHTML = "Ошибка записи: " + data["Errors"];
                    saving = false;
                }
            },
            error: function (xhr, str) {
                var myDiv = document.getElementById("dialog_customer_divmsg");
                myDiv.innerHTML = "Ошибка записи: " + xhr.responseCode;
                saving = false;
            }
        });
    }

    function EditRow(row, currentcell) {
        var cells = row.find("td");
        //var col = row.children().index(cell);
        $("#bankaccounts_table_inputrow").find("input").each(function (index, value) {
            $(this).attr("value", cells.eq(index).html());
            // сохраним в поле input в атрибуте prevVal значение ячейки до изменения
            $(this).attr("prevVal", cells.eq(index).val());
            $(this).attr("type", $(this).attr("show") == "true" ? "text" : "hidden");
            cells.eq(index).html("");
            cells.eq(index).append($(this));
        });

        //cell.html('<input type="text" value="' + val + '" />');
        //var input = cell.find('input');
        // input.attr("prevVal", val);
        //input.addClass("tableinput");
        if (!currentcell) {
            row.find("input").first().focus();
        }
        else {
            currentcell.find("input").first().focus();
        }

        // при потере фокуса ввода
        input.on('blur', function () {
            @*Если просто перешли на другую ячейку, ничего не делаем*@
            if ($(':focus').hasClass("tableinput")) return;
            // проверим на заполненность ячеек
            var row = $(this).parent().parent();
            var rowdata = new Array();

            var isempty = false;
            row.find("input").each(function (index, value) {
                rowdata[index] = $(this).val();
                if (rowdata[index] == "") {
                    isempty = true;
                }
            });

            if (isempty) {
                return;
            }

            // Запрос на сервер для обновления данных

            // После снятия фокуса, снова установим просто текст
            //e.parent().html(e.val());

            SaveData(rowdata);
        });
    }

    function DeleteRow(row) {

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteBankAccount", "Customers")',
            data: { BankAccountId: row.find("td").eq(3).html() },
            success: function (data) {
                if (data["isOk"]) {
                    row.remove();
                }
                else {
                    var myDiv = document.getElementById("dialog_customer_divmsg");
                    myDiv.innerHTML = "Ошибка записи: " + data["Errors"];
                }
            },
            error: function (xhr, str) {
                var myDiv = document.getElementById("dialog_customer_divmsg");
                myDiv.innerHTML = "Ошибка записи: " + xhr.responseCode;
            }
        });
    }

    // Обработка ввода с клавиатуры и указателя

    // Устанавливаем фокус на таблицу если щелкнули мышкой внутри таблицы
    $("body").click(function (e) {
        if (e.target.id == "bankaccounts_table" || $(e.target).parents("#bankaccounts_table").size()) {
            $("#bankaccounts_table_input").focus();
        }
    });

    // подсвечивание строки
    $('#bankaccounts_table_div').on('click', '#bankaccounts_table > tbody > tr', function () {
        $(this).addClass('highlight').siblings().removeClass('highlight');
    });

    // двойной клик по ячейке таблицы, проиходсит вход в режим редактирования
    $('#bankaccounts_table_div').on('dblclick', '#bankaccounts_table > tbody > tr > td', function () {
        EditRow($(this).parent(), $(this));
    });

    $(document).on('keydown', function (e) {
        // если нажата клавиша ESC и выполняется редактирование ячейки,
        // то необходимо завершить редактирование не сохраняя введенные данные
        if (e.keyCode == $.ui.keyCode.ESCAPE) {
            if (e.target.className == "tableinput") {
                e.preventDefault();
                var input = $(".tableinput").eq(0);
                var prevVal = input.attr("prevVal");
                input.parent().html(prevVal);
                $("#bankaccounts_table_input").focus();
            }
        }
            // если  нажата клавиша ENTER во время редактирования ячейки,
            // то необходимо сохранить введенные данные и перейти к редактированию следующей колонки
        else if (e.keyCode == $.ui.keyCode.ENTER) {
            if (e.target.className.indexOf("tableinput") > -1) {
                e.preventDefault();
                var input = $("#" + e.target.id);
                var td = input.parent();
                if (td.parent().children().index(td) < td.parent().find("input[type!='hidden']").length - 1) {
                    td.next('td').find("input").first().focus();
                }
                else {
                    var row = input.parent().parent();
                    var rowdata = new Array();
                    td.parent().find("input").each(function (index, value) {
                        rowdata[index] = $(this).val();
                    });

                    SaveData(rowdata);
                    $("#bankaccounts_table_input").focus();
                }
            }
                // Если нажат ENTER но редактирвоание строки еще не закончено, то игнорируем ввод
            else if ($("#bankaccounts_table_inputs").children("input").length == 0) {
                e.preventDefault();
            }
        }

    });

    // Если нажали клавишу внутри таблицы
    $('#bankaccounts_table_input').on('keydown', function (e) {
        // перемещение фокуса строки на одну строку вниз
        if (e.keyCode == $.ui.keyCode.DOWN) {
            e.preventDefault();
            $('#bankaccounts_table .highlight').next().addClass('highlight').siblings().removeClass('highlight');
        }

        // перемещение фокуса строки на одну строку вверх
        if (e.keyCode == $.ui.keyCode.UP) {
            e.preventDefault();
            $('#bankaccounts_table .highlight').prev().addClass('highlight').siblings().removeClass('highlight');
        }
        // вход в режим редактирования ячейки при нажатии клавише ENTER
        if (e.keyCode == $.ui.keyCode.ENTER) {
            if (e.target.className != "tableinput") {
                e.preventDefault();
                EditRow($('#bankaccounts_table .highlight'));
            }
        }
    });

    function msg(str) {
        var myDiv = document.getElementById("dialog_customer_divmsg");
        myDiv.innerHTML = str;
    }
</script>

@*Выделим первую строку*@
@if (Model.Count() != 0)
{
    <script>
        $('#bankaccounts_table > tbody > tr').first().addClass('highlight');
    </script>
}


        